// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Calculators.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculate Calories")]
    public partial class CalculateCaloriesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CalculatorTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculate Calories", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("I go to the Calories Calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("I select the Metric system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate calories in metric system")]
        [NUnit.Framework.CategoryAttribute("Calories")]
        [NUnit.Framework.TestCaseAttribute("30", "162", "57", "Female", "1,863", null)]
        [NUnit.Framework.TestCaseAttribute("30", "183", "75", "Male", "2,562", null)]
        public virtual void CalculateCaloriesInMetricSystem(string age, string height, string weight, string gender, string expectedResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Calories"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate calories in metric system", null, @__tags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table1.AddRow(new string[] {
                            "height",
                            string.Format("{0}", height)});
                table1.AddRow(new string[] {
                            "weight",
                            string.Format("{0}", weight)});
                table1.AddRow(new string[] {
                            "age",
                            string.Format("{0}", age)});
                table1.AddRow(new string[] {
                            "gender",
                            string.Format("{0}", gender)});
#line 12
 testRunner.Given("I enter the following data:", ((string)(null)), table1, "Given ");
#line hidden
#line 18
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then(string.Format("the result should be {0} on the screen", expectedResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate calories in metric system for a very active person")]
        [NUnit.Framework.CategoryAttribute("Calories")]
        public virtual void CalculateCaloriesInMetricSystemForAVeryActivePerson()
        {
            string[] tagsOfScenario = new string[] {
                    "Calories"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate calories in metric system for a very active person", null, new string[] {
                        "Calories"});
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table2.AddRow(new string[] {
                            "height",
                            "162"});
                table2.AddRow(new string[] {
                            "weight",
                            "57"});
                table2.AddRow(new string[] {
                            "age",
                            "30"});
                table2.AddRow(new string[] {
                            "gender",
                            "Female"});
#line 28
 testRunner.Given("I enter the following data:", ((string)(null)), table2, "Given ");
#line hidden
#line 34
 testRunner.And("I select Very Active from the activity dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the result should be 2,193 on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the correct error message is displayed when mandatory values are miss" +
            "ing")]
        [NUnit.Framework.CategoryAttribute("Calories")]
        [NUnit.Framework.CategoryAttribute("NegativeTests")]
        [NUnit.Framework.TestCaseAttribute("", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "", "75", "Male", "Please provide positive height value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "183", "", "Male", "Please provide positive weight value.", null)]
        public virtual void VerifyThatTheCorrectErrorMessageIsDisplayedWhenMandatoryValuesAreMissing(string age, string height, string weight, string gender, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Calories",
                    "NegativeTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the correct error message is displayed when mandatory values are miss" +
                    "ing", null, @__tags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table3.AddRow(new string[] {
                            "height",
                            string.Format("{0}", height)});
                table3.AddRow(new string[] {
                            "weight",
                            string.Format("{0}", weight)});
                table3.AddRow(new string[] {
                            "age",
                            string.Format("{0}", age)});
                table3.AddRow(new string[] {
                            "gender",
                            string.Format("{0}", gender)});
#line 40
 testRunner.Given("I enter the following data:", ((string)(null)), table3, "Given ");
#line hidden
#line 46
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then(string.Format("I should see the {0} message", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that the correct error message is displayed when invalid values are entere" +
            "d")]
        [NUnit.Framework.CategoryAttribute("Calories")]
        [NUnit.Framework.CategoryAttribute("NegativeTests")]
        [NUnit.Framework.TestCaseAttribute("14", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("81", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("0", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("a", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "162", "57", "Female", "Please provide an age between 15 and 80.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "0", "75", "Male", "Please provide positive height value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "a", "75", "Male", "Please provide positive height value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "-1", "75", "Male", "Please provide positive height value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "182", "0", "Male", "Please provide positive weight value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "180", "a", "Male", "Please provide positive weight value.", null)]
        [NUnit.Framework.TestCaseAttribute("30", "182", "-1", "Male", "Please provide positive weight value.", null)]
        public virtual void VerifyThatTheCorrectErrorMessageIsDisplayedWhenInvalidValuesAreEntered(string age, string height, string weight, string gender, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Calories",
                    "NegativeTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the correct error message is displayed when invalid values are entere" +
                    "d", null, @__tags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table4.AddRow(new string[] {
                            "height",
                            string.Format("{0}", height)});
                table4.AddRow(new string[] {
                            "weight",
                            string.Format("{0}", weight)});
                table4.AddRow(new string[] {
                            "age",
                            string.Format("{0}", age)});
                table4.AddRow(new string[] {
                            "gender",
                            string.Format("{0}", gender)});
#line 57
 testRunner.Given("I enter the following data:", ((string)(null)), table4, "Given ");
#line hidden
#line 63
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then(string.Format("I should see the {0} message", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
